name: CI/CD Pipeline for Django and Next.js

on:
  push:
    branches:
      - react-to-nextjs

jobs:
  build-and-deploy:
    name: Build and Deploy Applications
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Debug Environment Variables on GitHub Actions Runner
      - name: Debug Environment Variables
        run: |
          echo "Checking GitHub Secrets:"
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
          echo "DB_NAME=${{ secrets.DB_NAME }}"
          echo "DB_USER=${{ secrets.DB_USER }}"
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}"
          echo "SSH_PRIVATE_KEY=${{ secrets.SSH_PRIVATE_KEY }}"
      # Step 3: Set up SSH Agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 4: Add remote server to known hosts
      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Step 5: Test SSH Connection
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH Connection Successful!'"

      # Step 6: Copy files to server
      - name: Copy files to server
        run: |
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='__pycache__' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/leflaneur

      # Step 7: Build and Deploy Applications on Server
      - name: Build and Deploy Applications on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ~/leflaneur

          echo "Creating .env file with secrets..."
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "MOLLIE_API_KEY=${{ secrets.MOLLIE_API_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

          echo "Verifying .env file content:"
          cat .env

          echo "Stopping existing containers..."
          docker-compose down

          echo "Building and deploying containers without cache..."
          docker-compose build --no-cache
          docker-compose up -d

          echo "Deployment completed successfully!"
          EOF

      # Step 8: Verify Running Containers
      - name: Verify Running Containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker ps -a"

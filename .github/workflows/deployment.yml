name: CI/CD Pipeline for Django and Next.js

on:
  push:
    branches:
      - react-to-nextjs

jobs:
  build-and-deploy:
    name: Build and Deploy Applications
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up SSH Agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Add remote server to known hosts
      - name: Add remote server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Step 4: Test SSH Connection
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH Connection Successful!'"

      # Step 5: Copy files to server
      - name: Copy files to server
        run: |
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='__pycache__' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/leflaneur

      # Step 6: Build and Deploy Applications on Server
      - name: Build and Deploy Applications on Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ~/leflaneur

          echo "Creating .env file with secrets..."
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" > .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "BASE_SERVER_URL=${{ secrets.BASE_SERVER_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "ENV=${{ secrets.ENV }}" >> .env
          echo "MOLLIE_API_KEY=${{ secrets.MOLLIE_API_KEY }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "NEXT_PUBLIC_BASE_SERVER_URL=${{ secrets.NEXT_PUBLIC_BASE_SERVER_URL }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

           # Create .env file specifically for Next.js in the nextjs/ directory
          echo "Creating .env file in leflaneur/next-js/ "
          cat <<EOT > next-js/.env
          NEXT_PUBLIC_BASE_SERVER_URL=${{ secrets.NEXT_PUBLIC_BASE_SERVER_URL }}
          NEXT_PUBLIC_BASE_SERVER_SUB_URL=${{ secrets.NEXT_PUBLIC_BASE_SERVER_SUB_URL }}
          EOT
          echo "Verifying .env file content:"
          cat .env

          echo "Stopping existing containers..."
          docker-compose down --remove-orphans
          docker system prune -a -f

          echo "Building and deploying containers with build arguments..."
          docker-compose build --no-cache \
            --build-arg NEXT_PUBLIC_BASE_SERVER_URL=${{ secrets.NEXT_PUBLIC_BASE_SERVER_URL }}

          docker-compose up -d

          echo "Deployment completed successfully!"
          EOF

      # Step 7: Verify Running Containers
      - name: Verify Running Containers
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker ps -a"

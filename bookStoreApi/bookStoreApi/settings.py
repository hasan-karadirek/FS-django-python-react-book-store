"""
Django settings for bookStoreApi project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from book.backend_storage import StaticStorage, MediaStorage

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")


CORS_ALLOWED_ORIGINS = (
    ["http://localhost:3000"]
    if os.getenv("ENV") == "development"
    else ["http://34.141.203.80:3000",
        "https://www.leflaneuramsterdam.com",
        "https://leflaneuramsterdam.com",
    ]
)
CSRF_TRUSTED_ORIGINS = [
    "https://www.leflaneuramsterdam.com",
    "https://leflaneuramsterdam.com",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "POST",
    "PUT",
]

# Ensure SECURE_SSL_REDIRECT is set to True in production
SECURE_SSL_REDIRECT = False

# Optionally set SECURE_PROXY_SSL_HEADER if behind a proxy
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "storages",
    "store",
    "customer",
    "book",
    "payment",
    "blog",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.custom_error_handler.CustomExceptionMiddleware",
]


ROOT_URLCONF = "bookStoreApi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "frontend/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "bookStoreApi.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "OPTIONS": {
            "unix_socket": ""
            if os.getenv("ENV") == "development"
            else "/var/lib/mysql/mysql.sock",
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

from google.oauth2 import service_account

# Parse the GCS credentials JSON from an environment variable
GCS_CREDENTIALS_DICT = {
    "type": os.getenv("GCS_TYPE"),
    "project_id": os.getenv("GCS_PROJECT_ID"),
    "private_key_id": os.getenv("GCS_PRIVATE_KEY_ID"),
    "private_key": os.getenv("GCS_PRIVATE_KEY").replace("\\n", "\n"),  # Handle newline escape
    "client_email": os.getenv("GCS_CLIENT_EMAIL"),
    "client_id": os.getenv("GCS_CLIENT_ID"),
    "auth_uri": os.getenv("GCS_AUTH_URI"),
    "token_uri": os.getenv("GCS_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("GCS_AUTH_PROVIDER_CERT_URL"),
    "client_x509_cert_url": os.getenv("GCS_CLIENT_CERT_URL"),
    "universe_domain": os.getenv("GCS_UNIVERSE_DOMAIN"),
}
try:
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
        GCS_CREDENTIALS_DICT
    )
except Exception as e:
    raise ValueError(f"Failed to create GCS credentials: {e}")


# Google Cloud Storage Settings
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

GS_BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME")

# Set URLs for static and media
STATIC_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/static/"
MEDIA_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/media/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "customer.Customer"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "EXCEPTION_HANDLER": "core.custom_error_handler.custom_exception_handler",
}

# settings.py

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
